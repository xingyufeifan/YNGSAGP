package com.nandi.yngsagp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nandi.yngsagp.bean.DangerUBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DANGER_UBEAN".
*/
public class DangerUBeanDao extends AbstractDao<DangerUBean, Long> {

    public static final String TABLENAME = "DANGER_UBEAN";

    /**
     * Properties of entity DangerUBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReportMan = new Property(1, String.class, "reportMan", false, "REPORT_MAN");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Lon = new Property(6, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(7, String.class, "lat", false, "LAT");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Factor = new Property(9, String.class, "factor", false, "FACTOR");
        public final static Property Person = new Property(10, String.class, "person", false, "PERSON");
        public final static Property House = new Property(11, String.class, "house", false, "HOUSE");
        public final static Property Money = new Property(12, String.class, "money", false, "MONEY");
        public final static Property Farm = new Property(13, String.class, "farm", false, "FARM");
        public final static Property Other = new Property(14, String.class, "other", false, "OTHER");
        public final static Property Mobile = new Property(15, String.class, "mobile", false, "MOBILE");
        public final static Property Name = new Property(16, String.class, "name", false, "NAME");
        public final static Property DisasterPosition = new Property(17, int.class, "disasterPosition", false, "DISASTER_POSITION");
    }


    public DangerUBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DangerUBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DANGER_UBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REPORT_MAN\" TEXT," + // 1: reportMan
                "\"PHONE\" TEXT," + // 2: phone
                "\"TIME\" TEXT," + // 3: time
                "\"ADDRESS\" TEXT," + // 4: address
                "\"LOCATION\" TEXT," + // 5: location
                "\"LON\" TEXT," + // 6: lon
                "\"LAT\" TEXT," + // 7: lat
                "\"TYPE\" TEXT," + // 8: type
                "\"FACTOR\" TEXT," + // 9: factor
                "\"PERSON\" TEXT," + // 10: person
                "\"HOUSE\" TEXT," + // 11: house
                "\"MONEY\" TEXT," + // 12: money
                "\"FARM\" TEXT," + // 13: farm
                "\"OTHER\" TEXT," + // 14: other
                "\"MOBILE\" TEXT," + // 15: mobile
                "\"NAME\" TEXT," + // 16: name
                "\"DISASTER_POSITION\" INTEGER NOT NULL );"); // 17: disasterPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DANGER_UBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DangerUBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reportMan = entity.getReportMan();
        if (reportMan != null) {
            stmt.bindString(2, reportMan);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(7, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(8, lat);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String factor = entity.getFactor();
        if (factor != null) {
            stmt.bindString(10, factor);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(11, person);
        }
 
        String house = entity.getHouse();
        if (house != null) {
            stmt.bindString(12, house);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(13, money);
        }
 
        String farm = entity.getFarm();
        if (farm != null) {
            stmt.bindString(14, farm);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(15, other);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(16, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(17, name);
        }
        stmt.bindLong(18, entity.getDisasterPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DangerUBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reportMan = entity.getReportMan();
        if (reportMan != null) {
            stmt.bindString(2, reportMan);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(7, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(8, lat);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String factor = entity.getFactor();
        if (factor != null) {
            stmt.bindString(10, factor);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(11, person);
        }
 
        String house = entity.getHouse();
        if (house != null) {
            stmt.bindString(12, house);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(13, money);
        }
 
        String farm = entity.getFarm();
        if (farm != null) {
            stmt.bindString(14, farm);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(15, other);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(16, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(17, name);
        }
        stmt.bindLong(18, entity.getDisasterPosition());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DangerUBean readEntity(Cursor cursor, int offset) {
        DangerUBean entity = new DangerUBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportMan
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // factor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // person
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // house
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // money
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // farm
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // other
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mobile
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // name
            cursor.getInt(offset + 17) // disasterPosition
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DangerUBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReportMan(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFactor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPerson(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHouse(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMoney(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFarm(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOther(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMobile(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDisasterPosition(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DangerUBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DangerUBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DangerUBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
